{"version":3,"sources":["../src/single-spa-angular.js"],"names":["defaultOpts","angularPlatform","mainModule","template","Router","ApplicationRef","NgZone","domElementGetter","singleSpaAngular","userOpts","Error","opts","bootstrap","bind","mount","unmount","Promise","resolve","then","zoneIdentifier","props","name","appName","isInAngularZone","window","Zone","current","get","routingEventListener","evt","applicationRef","bootstrappedModule","injector","tick","chooseDomElementGetter","containerEl","getContainerEl","innerHTML","bootstrapModule","module","_inner","_properties","addEventListener","routerRef","dispose","removeEventListener","destroy","element","customProps"],"mappings":"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","sourcesContent":["const defaultOpts = {\n  // required opts\n  angularPlatform: null,\n  mainModule: null,\n  template: null,\n  // optional opts\n  Router: null,\n  ApplicationRef: null,\n  NgZone: null,\n  domElementGetter: null, // only optional if you provide a domElementGetter as a custom prop\n};\n\nexport default function singleSpaAngular(userOpts) {\n  if (typeof userOpts !== 'object') {\n    throw new Error(`single-spa-angular requires a configuration object`);\n  }\n\n  const opts = {\n    ...defaultOpts,\n    ...userOpts,\n  };\n\n  if (!opts.angularPlatform) {\n    throw new Error(`single-spa-angular must be passed opts.angularPlatform. Usually this should be the return value of platformBrowserDynamic()`);\n  }\n\n  if (!opts.mainModule) {\n    throw new Error(`single-spa-angular must be passed opts.mainModule, which is the Angular module to bootstrap`);\n  }\n\n  if (typeof opts.template !== 'string') {\n    throw new Error(`single-spa-angular must be passed opts.template string`);\n  }\n\n  if (opts.Router && !opts.ApplicationRef || opts.ApplicationRef && !opts.Router) {\n    throw Error('For @angular/router to work with single-spa, you must provide both the Router and ApplicationRef opts');\n  }\n\n  return {\n    bootstrap: bootstrap.bind(null, opts),\n    mount: mount.bind(null, opts),\n    unmount: unmount.bind(null, opts),\n  };\n}\n\nfunction bootstrap(opts) {\n  return Promise.resolve().then(() => {\n    // In order for multiple Angular apps to work concurrently on a page, they each need a unique identifier.\n    opts.zoneIdentifier = `single-spa-angular:${props.name || props.appName}`;\n\n    if (opts.NgZone) {\n      // This is a hack, since NgZone doesn't allow you to configure the property that identifies your zone.\n      // See https://github.com/PlaceMe-SAS/single-spa-angular-cli/issues/33,\n      // https://github.com/CanopyTax/single-spa-angular/issues/47,\n      // https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L144,\n      // and https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L257\n      opts.NgZone.isInAngularZone = function() {\n        // @ts-ignore\n        return window.Zone.current.get(opts.zoneIdentifier) === true;\n      }\n    }\n\n    opts.routingEventListener = function(evt) {\n      /* When popstate and hashchange events occur, single-spa delays them in order to\n       * check which applications should be active and perform any necessary mounting/unmounting.\n       *\n       * ZoneJS freaks out about this because it hears about the events but it wasn't inside of a\n       * Zone.current.run() block (or similar). I tried out modifying single-spa to call the event listener\n       * inside of a Zone.run() block, but that didn't seem to help. I think if we could get that working\n       * that it would be the best solution.\n       *\n       * I also tried out trying to detect with single-spa:routing-event events are the ones that actually\n       * need to trigger an application tick, since not every one of them does. But I wasn't able to find a reliable\n       * way of detecting it. So I fell back to just always causing an application tick, even though that's probably\n       * not great for performance.\n       */\n      const applicationRef = opts.bootstrappedModule.injector.get(opts.ApplicationRef)\n      applicationRef.tick()\n    }\n  })\n}\n\nfunction mount(opts, props) {\n  return Promise\n    .resolve()\n    .then(() => {\n      const domElementGetter = chooseDomElementGetter(opts, props)\n      if (!domElementGetter) {\n        throw new Error(`cannot mount angular application '${props.name || props.appName}' without a domElementGetter provided either as an opt or a prop`)\n      }\n\n      const containerEl = getContainerEl(domElementGetter)\n      containerEl.innerHTML = opts.template\n    })\n    .then(() => {\n      return opts\n        .angularPlatform\n        .bootstrapModule(opts.mainModule)\n        .then(module => {\n          if (opts.NgZone) {\n            module.injector.get(opts.NgZone)._inner._properties[opts.zoneIdentifier] = true;\n          }\n          opts.bootstrappedModule = module;\n          if (opts.ApplicationRef) {\n            window.addEventListener('single-spa:routing-event', opts.routingEventListener)\n          }\n          return module\n        })\n    })\n}\n\nfunction unmount(opts, props) {\n  return Promise.resolve().then(() => {\n    if (opts.Router) {\n      // Workaround for https://github.com/angular/angular/issues/19079\n      const routerRef = opts.bootstrappedModule.injector.get(opts.Router);\n      routerRef.dispose();\n    }\n    if (opts.ApplicationRef) {\n      window.removeEventListener('single-spa:routing-event', opts.routingEventListener)\n    }\n    opts.bootstrappedModule.destroy();\n    delete opts.bootstrappedModule;\n  })\n}\n\nfunction getContainerEl(domElementGetter) {\n  const element = domElementGetter();\n  if (!element) {\n    throw new Error(`domElementGetter did not return a valid dom element`);\n  }\n\n  return element;\n}\n\nfunction chooseDomElementGetter(opts, props) {\n  return props && props.customProps && props.customProps.domElementGetter ? props.customProps.domElementGetter : opts.domElementGetter\n}\n"],"file":"single-spa-angular.js"}